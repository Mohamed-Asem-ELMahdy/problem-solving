class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string,vector<string>>mp;
        vector<vector<string>> ans;

        for(auto x : strs){
            string key = x;
            sort(key.begin(),key.end());
            mp[key].push_back(x);
        }

        for(auto x : mp){
            ans.push_back(x.second);
        }

        return ans;
    }
};

// optmized solution

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        priority_queue<pair<int, int>> pq;
        unordered_map<int,int>mp;
        vector<int>ans;
        for(auto x : nums){
            mp[x]++;
        }
        for(auto x: mp){
            pq.push({x.second,x.first});
        }
        for(int i=0;i<k;i++)
        {
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};
